import uml : 'http://www.eclipse.org/uml2/5.0.0/UML#/'

context uml::Model

-- get the first child element of p named n
def: getChildPackage(p: uml::Element, n:String):uml::Package = p.ownedElement->selectByKind(
	uml::Package
)->select(c|c.name=n)->asOrderedSet()->at(1)

def: getFirstLayerPackage(m : uml::Model) : Set(uml::Element) = m.ownedElement->selectByKind(uml::Package)

def: checkPackageSiblings(pkg: uml::Package):Boolean=pkg.ownedElement->selectByKind(uml::Package)->size() 
+ pkg.ownedElement->selectByKind(uml::Comment)->size() = pkg.ownedElement->reject(p|
	p.oclIsTypeOf(uml::PackageImport) or p.oclIsTypeOf(uml::ProfileApplication)
)->size()

def: checkRequirementPackage(pkg: uml::Package) : Boolean = pkg.ownedElement->size()>0 and 
pkg.ownedElement->select(p|p.oclAsType(uml::NamedElement).name='PerformanceRequirement' and 
	p.getAppliedStereotype('SysML::Requirements::Requirement')<>null
)->size()>0

def: getStereotype(a:uml::Element,name: String) : uml::Stereotype = a.getAppliedStereotype(name)

def: getChildBlock(bs: uml::Element):Set(uml::Element) = bs.ownedElement->select(p|
	p.getAppliedStereotype('SysML::Blocks::Block')<>null 
	--and p.getAppliedStereotype('SysML::Blocks::Block').name='Block'
)->asSet()

def: getChildBlockSet(bs: Set(uml::Element)):Set(uml::Element) = bs.ownedElement->select(p|
	p.getAppliedStereotype('SysML::Blocks::Block')<>null
	--and p.getAppliedStereotype('SysML::Blocks::Block').name='Block'
)->asSet()

--inv TopLevelPackageNaming : 
--let topLevelPackageNames : Set(String) = Set{'Requirements', 'Structure', 'Behaviors', 'Types'} in
--topLevelPackageNames->forAll(p|
--	getFirstLayerPackage(self).oclAsType(uml::NamedElement).name->includes(p)
--)

-- inv TopLevelPackageSiblings:checkPackageSiblings(self) there are Abstractions

inv RequirementPackageExists : 
let rPackage:uml::Package = getChildPackage(self,'Requirements') in 
not rPackage.oclIsInvalid()

inv PerformanceRequirementConstraint : 
let rPackage:uml::Package = getChildPackage(self,'Requirements') in 
checkRequirementPackage(rPackage)

--inv OneSystemBlock: -- change this.
--let structurePackage:uml::Package = getChildPackage(self,'Structure') in
--structurePackage.ownedElement->one(p| p.getAppliedStereotype('SysML::Blocks::Block')<>null
--	 and p.oclAsType(uml::NamedElement).name='System'
--)

inv StructurePackageExists :
not getChildPackage(self, 'Structure').oclIsInvalid()

inv StructureNoPackage: 
let structurePackage:uml::Package = getChildPackage(self,'Structure') in
 structurePackage.ownedElement->forAll(p|not p.oclIsTypeOf(uml::Package))

inv TwoLayerOfBlock: -- fail
let structurePackage:uml::Package = getChildPackage(self,'Structure') in 
getChildBlock(structurePackage)->size()>0 and
getChildBlockSet(getChildBlock(structurePackage))->size()>=0 and
getChildBlockSet(getChildBlockSet(getChildBlock(structurePackage)))->size()=0

def: checkBehaviorsPackage(pkg: uml::Package): Boolean =  
let pkg:uml::Package = getChildPackage(self,'Behaviors') in
pkg.ownedElement->selectByKind(uml::Package)->size()>1 and checkPackageSiblings(pkg) 
-- TODO do I need to check into the sub packages?
inv BehaviorsPackageExists:
not getChildPackage(self, 'Behaviors').oclIsInvalid()

inv BehaviorsPackageConstraint: checkBehaviorsPackage(getChildPackage(self,'Behaviors'))

inv ExternalInterfacesExists:
not getChildPackage(getChildPackage(self,'Behaviors'), 'ExternalInterfaces').oclIsInvalid()

inv TypesPackageExists:
not getChildPackage(self, 'Types').oclIsInvalid()

inv TypesPackageConstraint:
let pkg:uml::Package = getChildPackage(self,'Types') in
not pkg.oclIsInvalid() and pkg.ownedElement->selectByKind(uml::DataType)->size()>0 and
pkg.ownedElement->selectByKind(uml::Package)->size()=0

inv ConstantsPackageExists:
not getChildPackage(self, 'Constants').oclIsInvalid()

inv ConstantsPackageConstraint:
let pkg:uml::Package = getChildPackage(self,'Constants') in
not pkg.oclIsInvalid() and pkg.ownedElement->selectByKind(uml::DataType)->size()>0 and
pkg.ownedElement->selectByKind(uml::Package)->size()=0